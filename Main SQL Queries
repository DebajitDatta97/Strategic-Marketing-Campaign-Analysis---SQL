-- Getting the overview of the data.

select * from Customer

select * from Item

select * from CustomerTransactionData

select * from CouponMapping

select * from CityData

select * from Campaign

-- Checking out the cardinality of various columns:



-- Different color segments (categories) are provided by the company.

SELECT COUNT(DISTINCT(Item_Category)) 
FROM Item;



-- Different Coupon Types that are offered.

SELECT COUNT(DISTINCT(couponType)) 
FROM CouponMapping;



-- States where the company is currently delivering its products and services.

SELECT COUNT(DISTINCT(State)) 
FROM CityData;



-- Different Order Types.

SELECT COUNT(DISTINCT(OrderType)) 
FROM CustomerTransactionData;



-- Identify the total number of sales (transactions) that happen yearly.

SELECT Year(PurchaseDate) AS Years,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Years;



-- Identify the total number of sales (transactions) that happen quarterly.

SELECT Quarter(PurchaseDate) AS Quarters, 
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Quarters
ORDER BY Quarters DESC;



-- Identify the total number of sales (transactions) that happen Yearly and Monthly.

SELECT Year(PurchaseDate) AS Year,
Month(PurchaseDate) AS Month,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Year, Month
ORDER BY Total_Transaction DESC;


-- Identify the total purchase order by Product category.

SELECT i.Item_Category, SUM(cus.PurchasingAmt) AS Total_Purchasing_Amount
FROM CustomerTransactionData cus
LEFT JOIN Item i ON cus.item_id = i.Item_Id
GROUP BY Item_Category 
ORDER BY Total_Purchasing_Amount DESC;



-- Identify the total purchase order on a Yearly and Quarterly basis.

SELECT Year(PurchaseDate) AS Year,
Quarter(PurchaseDate) AS Quarters,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Year, Quarters
ORDER BY Total_Transaction DESC;



-- Identify the total purchase order on an Order-type basis.

SELECT OrderType, SUM(PurchasingAmt) AS Total_Purchasing_Amount
FROM CustomerTransactionData
GROUP BY OrderType
ORDER BY Total_Purchasing_Amount DESC;



-- Identify the total purchase order on a city-tier basis.

SELECT cd.CityTier, SUM(PurchasingAmt) AS Total_Purchasing_Amount
FROM Customer c 
LEFT JOIN CityData cd  ON c.City_Id = cd.City_Id
LEFT JOIN CustomerTransactionData cus ON cus.Cust_Id = c.Customer_Id
GROUP BY cd.CityTier 
ORDER BY Total_Purchasing_Amount DESC;








The company wants to understand the customer's path to conversion as a potential purchaser based on our campaigns.



-- Identifying the total number of transactions with campaign coupons vs the total number of transactions without campaign coupons.

SELECT 'With Coupon' as Coupon_Yes_No,
COUNT(Trans_Id) as Total_Transactions_With_Coupon
FROM CustomerTransactionData
WHERE campaign_id is null
UNION ALL
SELECT 'Without Coupon' as Coupon_Yes_No,
COUNT(Trans_Id) as Total_Transactions_Without_Coupon
FROM CustomerTransactionData
WHERE campaign_id is not null;



--  Identify the number of customers with the first purchase done with or without campaign coupons.

SELECT COUNT(coupon_id) as Total_Customers_With_Coupon, 
COUNT(*) - COUNT(coupon_id) as Total_Customers_Without_Coupon
FROM CustomerTransactionData
WHERE Trans_Id IN 
                 (
                    SELECT
                    FIRST_Value(Trans_Id) OVER (PARTITION BY Cust_Id ORDER BY PurchaseDate RANGE BETWEEN 
                    UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS First_Transaction_Id
                    FROM CustomerTransactionData
                 );






Understanding the growth and decline of the company.

The marketing team is interested in understanding the growth and decline pattern of the company in terms of new leads or sales amount by the customers.




-- Identify the total growth year-by-year based on the quantity of paint sold. 

SELECT EXTRACT(Year FROM PurchaseDate) as Year_of_Sale, 
SUM(quantity) as Quantity_Sold, 
SUM(PurchasingAmt) as Total_Purchased_Amount
FROM CustomerTransactionData
GROUP BY Year_of_Sale
ORDER BY Quantity_Sold ASC;




--  Identify the total growth on a year-by-year basis based on the amount of paint that's sold.

SELECT EXTRACT(Year FROM PurchaseDate) as Year_of_Sale, 
SUM(quantity) as Quantity_Sold, 
SUM(PurchasingAmt) as Total_Purchased_Amount
FROM CustomerTransactionData
GROUP BY Year_of_Sale
ORDER BY Year_of_Sale ASC;



-- Identify the total growth on a year-by-year basis for Customers acquired [New + Repeated]. 

SELECT COUNT(DISTINCT(Cust_Id)) as Customer_Ids, EXTRACT(Year FROM PurchaseDate) as Year
FROM CustomerTransactionData
WHERE EXTRACT(Year FROM PurchaseDate) < 2023
GROUP BY Year
ORDER BY Year DESC;








Market basket analysis

A market basket analysis is defined as a customerâ€™s overall buying pattern for different sets of products.
Essentially, the marketing team wants to understand customer purchasing patterns. 
Their proposal is if they promote the products in their next campaign, which are bought a couple of times together, then this will increase the revenue for the company.


-- Identify the dates when the same customer has purchased some product from the company outlets.

SELECT C1.Cust_Id, C1.PurchaseDate AS PurchaseDate1, C2.PurchaseDate AS PurchaseDate
FROM CustomerTransactionData AS C1
INNER JOIN CustomerTransactionData AS C2 ON C1.Cust_Id = C2.Cust_Id 
WHERE C1.Trans_Id != C2.Trans_Id AND C1.OrderType = C2.OrderType AND C1.item_id != C2.item_id;




-- Out of the first query where you have captured a repeated set of customers, Identify the same combination of products coming at least thrice sorted in descending order of their appearance.

SELECT C1.OrderType, CONCAT( C1.item_id, "," , C2.item_id) AS Item_Combination, 
COUNT(*) AS TotalTransaction
FROM CustomerTransactionData AS C1
INNER JOIN CustomerTransactionData AS C2
ON C1.Cust_Id = C2.Cust_Id
WHERE C1.Trans_Id != C2.Trans_Id 
AND C1.OrderType = C2.OrderType
AND C1.item_id != C2.item_id
GROUP BY C1.OrderType,Item_Combination
HAVING COUNT(*) >= 3
ORDER BY TotalTransaction DESC;








Automating tasks

-- Creating a Function to get the total discount.

DELIMITER $$
CREATE FUNCTION Discount (Quantity INT, Price INT, PurchasingAmt FLOAT)
RETURNS INT
DETERMINISTIC
BEGIN
     SET Discount INT;
     Discount = Quantity * Price - PurchasingAmt;
     RETURN Discount;
END $$
DELIMITER


SELECT Discount( Quantity, Price, PurchasingAmt) as Dicounted_Amount
FROM CustomerTransactionData;





-- Get the days/month/year elapsed since the last purchase of a customer depending on input from the user.

DELIMITER $$
CREATE FUNCTION Time_Elapsed
(val varchar(4), date_last_purchase date)
RETURNS INT 
DETERMINISTIC
BEGIN
    DECLARE time_elapsed INT;
    SET time_elapsed = IF(val='day', DATEDIFF(NOW(), date_last_purchase), YEAR(NOW()) - YEAR(date_last_purchase));
    RETURN time_elapsed; 
END$$
DELIMITER ;





-- Create a stored Procedure to check if there is any customer with age < 12. Print out the total of such customers on-screen.

DELIMITER $$
CREATE PROCEDURE CustomerAgeValidation (OUT p2 varchar(128))
BEGIN 
    SELECT COUNT(*)
    INTO p2
    FROM Customer
    WHERE YEAR(NOW()) - YEAR(Birthdate) <= 12;
END $$
DELIMITER ;


CALL CustomerAgeValidation( @p1);
SELECT @p1




