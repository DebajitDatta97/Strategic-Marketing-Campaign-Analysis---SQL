-- Getting the overview of the data.

select * from Customer

select * from Item

select * from CustomerTransactionData

select * from CouponMapping

select * from CityData

select * from Campaign

-- Checking out the cardinality of various columns:



-- Different color segments (categories) are provided by the company.

SELECT COUNT(DISTINCT(Item_Category)) 
FROM Item;



-- Different Coupon Types that are offered.

SELECT COUNT(DISTINCT(couponType)) 
FROM CouponMapping;



-- States where the company is currently delivering its products and services.

SELECT COUNT(DISTINCT(State)) 
FROM CityData;



-- Different Order Types.

SELECT COUNT(DISTINCT(OrderType)) 
FROM CustomerTransactionData;



-- Identify the total number of sales (transactions) that happen yearly.

SELECT Year(PurchaseDate) AS Years,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Years;



-- Identify the total number of sales (transactions) that happen quarterly.

SELECT Quarter(PurchaseDate) AS Quarters, 
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Quarters
ORDER BY Quarters DESC;



-- Identify the total number of sales (transactions) that happen Yearly and Monthly.

SELECT Year(PurchaseDate) AS Year,
Month(PurchaseDate) AS Month,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Year, Month
ORDER BY Total_Transaction DESC;


-- Identify the total purchase order by Product category.

SELECT i.Item_Category, SUM(cus.PurchasingAmt) AS Total_Purchasing_Amount
FROM CustomerTransactionData cus
LEFT JOIN Item i ON cus.item_id = i.Item_Id
GROUP BY Item_Category 
ORDER BY Total_Purchasing_Amount DESC;



-- Identify the total purchase order on a Yearly and Quarterly basis.

SELECT Year(PurchaseDate) AS Year,
Quarter(PurchaseDate) AS Quarters,
COUNT(Trans_Id) as Total_Transaction
FROM CustomerTransactionData
GROUP BY Year, Quarters
ORDER BY Total_Transaction DESC;



-- Identify the total purchase order on an Order-type basis.

SELECT OrderType, SUM(PurchasingAmt) AS Total_Purchasing_Amount
FROM CustomerTransactionData
GROUP BY OrderType
ORDER BY Total_Purchasing_Amount DESC;



-- Identify the total purchase order on a city-tier basis.

SELECT cd.CityTier, SUM(PurchasingAmt) AS Total_Purchasing_Amount
FROM Customer c 
LEFT JOIN CityData cd  ON c.City_Id = cd.City_Id
LEFT JOIN CustomerTransactionData cus ON cus.Cust_Id = c.Customer_Id
GROUP BY cd.CityTier 
ORDER BY Total_Purchasing_Amount DESC;








The company wants to understand the customer's path to conversion as a potential purchaser based on our campaigns.



-- Identifying the total number of transactions with campaign coupons vs the total number of transactions without campaign coupons.

SELECT 'With Coupon' as Coupon_Yes_No,
COUNT(Trans_Id) as Total_Transactions_With_Coupon
FROM CustomerTransactionData
WHERE campaign_id is null
UNION ALL
SELECT 'Without Coupon' as Coupon_Yes_No,
COUNT(Trans_Id) as Total_Transactions_Without_Coupon
FROM CustomerTransactionData
WHERE campaign_id is not null;



--  Identify the number of customers with the first purchase done with or without campaign coupons.

SELECT COUNT(coupon_id) as Total_Customers_With_Coupon, 
COUNT(*) - COUNT(coupon_id) as Total_Customers_Without_Coupon
FROM CustomerTransactionData
WHERE Trans_Id IN 
                 (
                    SELECT
                    FIRST_Value(Trans_Id) OVER (PARTITION BY Cust_Id ORDER BY PurchaseDate RANGE BETWEEN 
                    UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS First_Transaction_Id
                    FROM CustomerTransactionData
                 );






















